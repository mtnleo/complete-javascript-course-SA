{"mappings":"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","sources":["complete-javascript-course-SA/09-Data-Structures-Operators/final/script.js"],"sourcesContent":["'use strict';\n\nconst weekdays = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'];\nconst openingHours = {\n  [weekdays[3]]: {\n    open: 12,\n    close: 22,\n  },\n  [weekdays[4]]: {\n    open: 11,\n    close: 23,\n  },\n  [weekdays[5]]: {\n    open: 0, // Open 24 hours\n    close: 24,\n  },\n};\n\nconst restaurant = {\n  name: 'Classico Italiano',\n  location: 'Via Angelo Tavanti 23, Firenze, Italy',\n  categories: ['Italian', 'Pizzeria', 'Vegetarian', 'Organic'],\n  starterMenu: ['Focaccia', 'Bruschetta', 'Garlic Bread', 'Caprese Salad'],\n  mainMenu: ['Pizza', 'Pasta', 'Risotto'],\n\n  // ES6 enhanced object literals\n  openingHours,\n\n  order(starterIndex, mainIndex) {\n    return [this.starterMenu[starterIndex], this.mainMenu[mainIndex]];\n  },\n\n  orderDelivery({ starterIndex = 1, mainIndex = 0, time = '20:00', address }) {\n    console.log(\n      `Order received! ${this.starterMenu[starterIndex]} and ${this.mainMenu[mainIndex]} will be delivered to ${address} at ${time}`\n    );\n  },\n\n  orderPasta(ing1, ing2, ing3) {\n    console.log(\n      `Here is your declicious pasta with ${ing1}, ${ing2} and ${ing3}`\n    );\n  },\n\n  orderPizza(mainIngredient, ...otherIngredients) {\n    console.log(mainIngredient);\n    console.log(otherIngredients);\n  },\n};\n\n/*\n///////////////////////////////////////\n// String Methods Practice\n\nconst flights =\n  '_Delayed_Departure;fao93766109;txl2133758440;11:25+_Arrival;bru0943384722;fao93766109;11:45+_Delayed_Arrival;hel7439299980;fao93766109;12:05+_Departure;fao93766109;lis2323639855;12:30';\n\n// 🔴 Delayed Departure from FAO to TXL (11h25)\n//              Arrival from BRU to FAO (11h45)\n//   🔴 Delayed Arrival from HEL to FAO (12h05)\n//            Departure from FAO to LIS (12h30)\n\nconst getCode = str => str.slice(0, 3).toUpperCase();\n\nfor (const flight of flights.split('+')) {\n  const [type, from, to, time] = flight.split(';');\n  const output = `${type.startsWith('_Delayed') ? '🔴' : ''}${type.replaceAll(\n    '_',\n    ' '\n  )} ${getCode(from)} ${getCode(to)} (${time.replace(':', 'h')})`.padStart(36);\n  console.log(output);\n}\n\n///////////////////////////////////////\n// Coding Challenge #4\n\n\nWrite a program that receives a list of variable names written in underscore_case and convert them to camelCase.\n\nThe input will come from a textarea inserted into the DOM (see code below), and conversion will happen when the button is pressed.\n\nTHIS TEST DATA (pasted to textarea)\nunderscore_case\n first_name\nSome_Variable \n  calculate_AGE\ndelayed_departure\n\nSHOULD PRODUCE THIS OUTPUT (5 separate console.log outputs)\nunderscoreCase      ✅\nfirstName           ✅✅\nsomeVariable        ✅✅✅\ncalculateAge        ✅✅✅✅\ndelayedDeparture    ✅✅✅✅✅\n\nHINT 1: Remember which character defines a new line in the textarea 😉\nHINT 2: The solution only needs to work for a variable made out of 2 words, like a_b\nHINT 3: Start without worrying about the ✅. Tackle that only after you have the variable name conversion working 😉\nHINT 4: This challenge is difficult on purpose, so start watching the solution in case you're stuck. Then pause and continue!\n\nAfterwards, test with your own test data!\n\nGOOD LUCK 😀\n*/\n\n/*\ndocument.body.append(document.createElement('textarea'));\ndocument.body.append(document.createElement('button'));\n\ndocument.querySelector('button').addEventListener('click', function () {\n  const text = document.querySelector('textarea').value;\n  const rows = text.split('\\n');\n\n  for (const [i, row] of rows.entries()) {\n    const [first, second] = row.toLowerCase().trim().split('_');\n\n    const output = `${first}${second.replace(\n      second[0],\n      second[0].toUpperCase()\n    )}`;\n    console.log(`${output.padEnd(20)}${'✅'.repeat(i + 1)}`);\n  }\n});\n*/\n\n/*\n///////////////////////////////////////\n// Working With Strings - Part 3\n\n// Split and join\nconsole.log('a+very+nice+string'.split('+'));\nconsole.log('Jonas Schmedtmann'.split(' '));\n\nconst [firstName, lastName] = 'Jonas Schmedtmann'.split(' ');\n\nconst newName = ['Mr.', firstName, lastName.toUpperCase()].join(' ');\nconsole.log(newName);\n\nconst capitalizeName = function (name) {\n  const names = name.split(' ');\n  const namesUpper = [];\n\n  for (const n of names) {\n    // namesUpper.push(n[0].toUpperCase() + n.slice(1));\n    namesUpper.push(n.replace(n[0], n[0].toUpperCase()));\n  }\n  console.log(namesUpper.join(' '));\n};\n\ncapitalizeName('jessica ann smith davis');\ncapitalizeName('jonas schmedtmann');\n\n// Padding\nconst message = 'Go to gate 23!';\nconsole.log(message.padStart(20, '+').padEnd(30, '+'));\nconsole.log('Jonas'.padStart(20, '+').padEnd(30, '+'));\n\nconst maskCreditCard = function (number) {\n  const str = number + '';\n  const last = str.slice(-4);\n  return last.padStart(str.length, '*');\n};\n\nconsole.log(maskCreditCard(64637836));\nconsole.log(maskCreditCard(43378463864647384));\nconsole.log(maskCreditCard('334859493847755774747'));\n\n// Repeat\nconst message2 = 'Bad waether... All Departues Delayed... ';\nconsole.log(message2.repeat(5));\n\nconst planesInLine = function (n) {\n  console.log(`There are ${n} planes in line ${'🛩'.repeat(n)}`);\n};\nplanesInLine(5);\nplanesInLine(3);\nplanesInLine(12);\n\n\n///////////////////////////////////////\n// Working With Strings - Part 2\n\nconst airline = 'TAP Air Portugal';\n\nconsole.log(airline.toLowerCase());\nconsole.log(airline.toUpperCase());\n\n// Fix capitalization in name\nconst passenger = 'jOnAS'; // Jonas\nconst passengerLower = passenger.toLowerCase();\nconst passengerCorrect =\n  passengerLower[0].toUpperCase() + passengerLower.slice(1);\nconsole.log(passengerCorrect);\n\n// Comparing emails\nconst email = 'hello@jonas.io';\nconst loginEmail = '  Hello@Jonas.Io \\n';\n\n// const lowerEmail = loginEmail.toLowerCase();\n// const trimmedEmail = lowerEmail.trim();\nconst normalizedEmail = loginEmail.toLowerCase().trim();\nconsole.log(normalizedEmail);\nconsole.log(email === normalizedEmail);\n\n// replacing\nconst priceGB = '288,97£';\nconst priceUS = priceGB.replace('£', '$').replace(',', '.');\nconsole.log(priceUS);\n\nconst announcement =\n  'All passengers come to boarding door 23. Boarding door 23!';\n\nconsole.log(announcement.replace('door', 'gate'));\nconsole.log(announcement.replaceAll('door', 'gate'));\n\n// Alternative solution to replaceAll with regular expression\nconsole.log(announcement.replace(/door/g, 'gate'));\n\n// Booleans\nconst plane = 'Airbus A320neo';\nconsole.log(plane.includes('A320'));\nconsole.log(plane.includes('Boeing'));\nconsole.log(plane.startsWith('Airb'));\n\nif (plane.startsWith('Airbus') && plane.endsWith('neo')) {\n  console.log('Part of the NEW ARirbus family');\n}\n\n// Practice exercise\nconst checkBaggage = function (items) {\n  const baggage = items.toLowerCase();\n\n  if (baggage.includes('knife') || baggage.includes('gun')) {\n    console.log('You are NOT allowed on board');\n  } else {\n    console.log('Welcome aboard!');\n  }\n};\n\ncheckBaggage('I have a laptop, some Food and a pocket Knife');\ncheckBaggage('Socks and camera');\ncheckBaggage('Got some snacks and a gun for protection');\n\n\n///////////////////////////////////////\n// Working With Strings - Part 1\nconst airline = 'TAP Air Portugal';\nconst plane = 'A320';\n\nconsole.log(plane[0]);\nconsole.log(plane[1]);\nconsole.log(plane[2]);\nconsole.log('B737'[0]);\n\nconsole.log(airline.length);\nconsole.log('B737'.length);\n\nconsole.log(airline.indexOf('r'));\nconsole.log(airline.lastIndexOf('r'));\nconsole.log(airline.indexOf('portugal'));\n\nconsole.log(airline.slice(4));\nconsole.log(airline.slice(4, 7));\n\nconsole.log(airline.slice(0, airline.indexOf(' ')));\nconsole.log(airline.slice(airline.lastIndexOf(' ') + 1));\n\nconsole.log(airline.slice(-2));\nconsole.log(airline.slice(1, -1));\n\nconst checkMiddleSeat = function (seat) {\n  // B and E are middle seats\n  const s = seat.slice(-1);\n  if (s === 'B' || s === 'E') console.log('You got the middle seat 😬');\n  else console.log('You got lucky 😎');\n};\n\ncheckMiddleSeat('11B');\ncheckMiddleSeat('23C');\ncheckMiddleSeat('3E');\n\nconsole.log(new String('jonas'));\nconsole.log(typeof new String('jonas'));\n\nconsole.log(typeof new String('jonas').slice(1));\n*/\n\n///////////////////////////////////////\n// Coding Challenge #3\n\n/* \nLet's continue with our football betting app! This time, we have a map with a log of the events that happened during the game. The values are the events themselves, and the keys are the minutes in which each event happened (a football game has 90 minutes plus some extra time).\n\n1. Create an array 'events' of the different game events that happened (no duplicates)\n2. After the game has finished, is was found that the yellow card from minute 64 was unfair. So remove this event from the game events log.\n3. Print the following string to the console: \"An event happened, on average, every 9 minutes\" (keep in mind that a game has 90 minutes)\n4. Loop over the events and log them to the console, marking whether it's in the first half or second half (after 45 min) of the game, like this:\n      [FIRST HALF] 17: ⚽️ GOAL\n\nGOOD LUCK 😀\n*/\n\nconst gameEvents = new Map([\n  [17, '⚽️ GOAL'],\n  [36, '🔁 Substitution'],\n  [47, '⚽️ GOAL'],\n  [61, '🔁 Substitution'],\n  [64, '🔶 Yellow card'],\n  [69, '🔴 Red card'],\n  [70, '🔁 Substitution'],\n  [72, '🔁 Substitution'],\n  [76, '⚽️ GOAL'],\n  [80, '⚽️ GOAL'],\n  [92, '🔶 Yellow card'],\n]);\n\n/*\n// 1.\nconst events = [...new Set(gameEvents.values())];\nconsole.log(events);\n\n// 2.\ngameEvents.delete(64);\n\n// 3.\nconsole.log(\n  `An event happened, on average, every ${90 / gameEvents.size} minutes`\n);\nconst time = [...gameEvents.keys()].pop();\nconsole.log(time);\nconsole.log(\n  `An event happened, on average, every ${time / gameEvents.size} minutes`\n);\n\n// 4.\nfor (const [min, event] of gameEvents) {\n  const half = min <= 45 ? 'FIRST' : 'SECOND';\n  console.log(`[${half} HALF] ${min}: ${event}`);\n}\n*/\n\n/*\n///////////////////////////////////////\n// Maps: Iteration\nconst question = new Map([\n  ['question', 'What is the best programming language in the world?'],\n  [1, 'C'],\n  [2, 'Java'],\n  [3, 'JavaScript'],\n  ['correct', 3],\n  [true, 'Correct 🎉'],\n  [false, 'Try again!'],\n]);\nconsole.log(question);\n\n// Convert object to map\nconsole.log(Object.entries(openingHours));\nconst hoursMap = new Map(Object.entries(openingHours));\nconsole.log(hoursMap);\n\n// Quiz app\nconsole.log(question.get('question'));\nfor (const [key, value] of question) {\n  if (typeof key === 'number') console.log(`Answer ${key}: ${value}`);\n}\n// const answer = Number(prompt('Your answer'));\nconst answer = 3;\nconsole.log(answer);\n\nconsole.log(question.get(question.get('correct') === answer));\n\n// Convert map to array\nconsole.log([...question]);\n// console.log(question.entries());\nconsole.log([...question.keys()]);\nconsole.log([...question.values()]);\n\n\n///////////////////////////////////////\n// Maps: Fundamentals\nconst rest = new Map();\nrest.set('name', 'Classico Italiano');\nrest.set(1, 'Firenze, Italy');\nconsole.log(rest.set(2, 'Lisbon, Portugal'));\n\nrest\n  .set('categories', ['Italian', 'Pizzeria', 'Vegetarian', 'Organic'])\n  .set('open', 11)\n  .set('close', 23)\n  .set(true, 'We are open :D')\n  .set(false, 'We are closed :(');\n\nconsole.log(rest.get('name'));\nconsole.log(rest.get(true));\nconsole.log(rest.get(1));\n\nconst time = 8;\nconsole.log(rest.get(time > rest.get('open') && time < rest.get('close')));\n\nconsole.log(rest.has('categories'));\nrest.delete(2);\n// rest.clear();\n\nconst arr = [1, 2];\nrest.set(arr, 'Test');\nrest.set(document.querySelector('h1'), 'Heading');\nconsole.log(rest);\nconsole.log(rest.size);\n\nconsole.log(rest.get(arr));\n\n\n///////////////////////////////////////\n// New Operations to Make Sets Useful!\n\nconst italianFoods = new Set([\n  'pasta',\n  'gnocchi',\n  'tomatoes',\n  'olive oil',\n  'garlic',\n  'basil',\n]);\n\nconst mexicanFoods = new Set([\n  'tortillas',\n  'beans',\n  'rice',\n  'tomatoes',\n  'avocado',\n  'garlic',\n]);\n\nconst commonFoods = italianFoods.intersection(mexicanFoods);\nconsole.log('Intersection:', commonFoods);\nconsole.log([...commonFoods]);\n\nconst italianMexicanFusion = italianFoods.union(mexicanFoods);\nconsole.log('Union:', italianMexicanFusion);\n\nconsole.log([...new Set([...italianFoods, ...mexicanFoods])]);\n\nconst uniqueItalianFoods = italianFoods.difference(mexicanFoods);\nconsole.log('Difference italian', uniqueItalianFoods);\n\nconst uniqueMexicanFoods = mexicanFoods.difference(italianFoods);\nconsole.log('Difference mexican', uniqueMexicanFoods);\n\nconst uniqueItalianAndMexicanFoods =\n  italianFoods.symmetricDifference(mexicanFoods);\nconsole.log(uniqueItalianAndMexicanFoods);\n\nconsole.log(italianFoods.isDisjointFrom(mexicanFoods));\n\n\n///////////////////////////////////////\n// Sets\nconst ordersSet = new Set([\n  'Pasta',\n  'Pizza',\n  'Pizza',\n  'Risotto',\n  'Pasta',\n  'Pizza',\n]);\nconsole.log(ordersSet);\n\nconsole.log(new Set('Jonas'));\n\nconsole.log(ordersSet.size);\nconsole.log(ordersSet.has('Pizza'));\nconsole.log(ordersSet.has('Bread'));\nordersSet.add('Garlic Bread');\nordersSet.add('Garlic Bread');\nordersSet.delete('Risotto');\n// ordersSet.clear();\nconsole.log(ordersSet);\n\nfor (const order of ordersSet) console.log(order);\n\n// Example\nconst staff = ['Waiter', 'Chef', 'Waiter', 'Manager', 'Chef', 'Waiter'];\nconst staffUnique = [...new Set(staff)];\nconsole.log(staffUnique);\n\nconsole.log(\n  new Set(['Waiter', 'Chef', 'Waiter', 'Manager', 'Chef', 'Waiter']).size\n);\n\nconsole.log(new Set('jonasschmedtmann').size);\n*/\n\n///////////////////////////////////////\n// Coding Challenge #2\n\n/* \nLet's continue with our football betting app!\n\n1. Loop over the game.scored array and print each player name to the console, along with the goal number (Example: \"Goal 1: Lewandowski\")\n2. Use a loop to calculate the average odd and log it to the console (We already studied how to calculate averages, you can go check if you don't remember)\n3. Print the 3 odds to the console, but in a nice formatted way, exaclty like this:\n      Odd of victory Bayern Munich: 1.33\n      Odd of draw: 3.25\n      Odd of victory Borrussia Dortmund: 6.5\nGet the team names directly from the game object, don't hardcode them (except for \"draw\"). HINT: Note how the odds and the game objects have the same property names 😉\n\nBONUS: Create an object called 'scorers' which contains the names of the players who scored as properties, and the number of goals as the value. In this game, it will look like this:\n      {\n        Gnarby: 1,\n        Hummels: 1,\n        Lewandowski: 2\n      }\n\nGOOD LUCK 😀\n*/\n\nconst game = {\n  team1: 'Bayern Munich',\n  team2: 'Borrussia Dortmund',\n  players: [\n    [\n      'Neuer',\n      'Pavard',\n      'Martinez',\n      'Alaba',\n      'Davies',\n      'Kimmich',\n      'Goretzka',\n      'Coman',\n      'Muller',\n      'Gnarby',\n      'Lewandowski',\n    ],\n    [\n      'Burki',\n      'Schulz',\n      'Hummels',\n      'Akanji',\n      'Hakimi',\n      'Weigl',\n      'Witsel',\n      'Hazard',\n      'Brandt',\n      'Sancho',\n      'Gotze',\n    ],\n  ],\n  score: '4:0',\n  scored: ['Lewandowski', 'Gnarby', 'Lewandowski', 'Hummels'],\n  date: 'Nov 9th, 2037',\n  odds: {\n    team1: 1.33,\n    x: 3.25,\n    team2: 6.5,\n  },\n};\n\n/*\n// 1.\nfor (const [i, player] of game.scored.entries())\n  console.log(`Goal ${i + 1}: ${player}`);\n\n// 2.\nconst odds = Object.values(game.odds);\nlet average = 0;\nfor (const odd of odds) average += odd;\naverage /= odds.length;\nconsole.log(average);\n\n// 3.\nfor (const [team, odd] of Object.entries(game.odds)) {\n  const teamStr = team === 'x' ? 'draw' : `victory ${game[team]}`;\n  console.log(`Odd of ${teamStr} ${odd}`);\n}\n\n// Odd of victory Bayern Munich: 1.33\n// Odd of draw: 3.25\n// Odd of victory Borrussia Dortmund: 6.5\n\n// BONUS\n// So the solution is to loop over the array, and add the array elements as object properties, and then increase the count as we encounter a new occurence of a certain element\nconst scorers = {};\nfor (const player of game.scored) {\n  scorers[player] ? scorers[player]++ : (scorers[player] = 1);\n}\n*/\n\n/*\n///////////////////////////////////////\n// Looping Objects: Object Keys, Values, and Entries\n\n// Property NAMES\nconst properties = Object.keys(openingHours);\nconsole.log(properties);\n\nlet openStr = `We are open on ${properties.length} days: `;\nfor (const day of properties) {\n  openStr += `${day}, `;\n}\nconsole.log(openStr);\n\n// Property VALUES\nconst values = Object.values(openingHours);\nconsole.log(values);\n\n// Entire object\nconst entries = Object.entries(openingHours);\n// console.log(entries);\n\n// [key, value]\nfor (const [day, { open, close }] of entries) {\n  console.log(`On ${day} we open at ${open} and close at ${close}`);\n}\n\n\n///////////////////////////////////////\n// Optional Chaining\nif (restaurant.openingHours && restaurant.openingHours.mon)\n  console.log(restaurant.openingHours.mon.open);\n\n// console.log(restaurant.openingHours.mon.open);\n\n// WITH optional chaining\nconsole.log(restaurant.openingHours.mon?.open);\nconsole.log(restaurant.openingHours?.mon?.open);\n\n// Example\nconst days = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'];\n\nfor (const day of days) {\n  const open = restaurant.openingHours[day]?.open ?? 'closed';\n  console.log(`On ${day}, we open at ${open}`);\n}\n\n// Methods\nconsole.log(restaurant.order?.(0, 1) ?? 'Method does not exist');\nconsole.log(restaurant.orderRisotto?.(0, 1) ?? 'Method does not exist');\n\n// Arrays\nconst users = [{ name: 'Jonas', email: 'hello@jonas.io' }];\n// const users = [];\n\nconsole.log(users[0]?.name ?? 'User array empty');\n\nif (users.length > 0) console.log(users[0].name);\nelse console.log('user array empty');\n\n\n///////////////////////////////////////\n// The for-of Loop\nconst menu = [...restaurant.starterMenu, ...restaurant.mainMenu];\n\nfor (const item of menu) console.log(item);\n\nfor (const [i, el] of menu.entries()) {\n  console.log(`${i + 1}: ${el}`);\n}\n\n// console.log([...menu.entries()]);\n*/\n\n///////////////////////////////////////\n// Coding Challenge #1\n\n/* \nWe're building a football betting app (soccer for my American friends 😅)!\n\nSuppose we get data from a web service about a certain game (below). In this challenge we're gonna work with the data. So here are your tasks:\n\n1. Create one player array for each team (variables 'players1' and 'players2')\n2. The first player in any player array is the goalkeeper and the others are field players. For Bayern Munich (team 1) create one variable ('gk') with the goalkeeper's name, and one array ('fieldPlayers') with all the remaining 10 field players\n3. Create an array 'allPlayers' containing all players of both teams (22 players)\n4. During the game, Bayern Munich (team 1) used 3 substitute players. So create a new array ('players1Final') containing all the original team1 players plus 'Thiago', 'Coutinho' and 'Perisic'\n5. Based on the game.odds object, create one variable for each odd (called 'team1', 'draw' and 'team2')\n6. Write a function ('printGoals') that receives an arbitrary number of player names (NOT an array) and prints each of them to the console, along with the number of goals that were scored in total (number of player names passed in)\n7. The team with the lower odd is more likely to win. Print to the console which team is more likely to win, WITHOUT using an if/else statement or the ternary operator.\n\nTEST DATA FOR 6: Use players 'Davies', 'Muller', 'Lewandowski' and 'Kimmich'. Then, call the function again with players from game.scored\n\nGOOD LUCK 😀\n*/\n\n/*\n// 1.\nconst [players1, players2] = game.players;\nconsole.log(players1, players2);\n\n// 2.\nconst [gk, ...fieldPlayers] = players1;\nconsole.log(gk, fieldPlayers);\n\n// 3.\nconst allPlayers = [...players1, ...players2];\nconsole.log(allPlayers);\n\n// 4.\nconst players1Final = [...players1, 'Thiago', 'Coutinho', 'Periscic'];\n\n// 5.\nconst {\n  odds: { team1, x: draw, team2 },\n} = game;\nconsole.log(team1, draw, team2);\n\n// 6.\nconst printGoals = function (...players) {\n  console.log(players);\n  console.log(`${players.length} goals were scored`);\n};\n\n// printGoals('Davies', 'Muller', 'Lewandowski', 'Kimmich');\n// printGoals('Davies', 'Muller');\nprintGoals(...game.scored);\n\n// 7.\nteam1 < team2 && console.log('Team 1 is more likely to win');\nteam1 > team2 && console.log('Team 2 is more likely to win');\n\n\n///////////////////////////////////////\n// Logical Assignment Operators\nconst rest1 = {\n  name: 'Capri',\n  // numGuests: 20,\n  numGuests: 0,\n};\n\nconst rest2 = {\n  name: 'La Piazza',\n  owner: 'Giovanni Rossi',\n};\n\n// OR assignment operator\n// rest1.numGuests = rest1.numGuests || 10;\n// rest2.numGuests = rest2.numGuests || 10;\n// rest1.numGuests ||= 10;\n// rest2.numGuests ||= 10;\n\n// nullish assignment operator (null or undefined)\nrest1.numGuests ??= 10;\nrest2.numGuests ??= 10;\n\n// AND assignment operator\n// rest1.owner = rest1.owner && '<ANONYMOUS>';\n// rest2.owner = rest2.owner && '<ANONYMOUS>';\nrest1.owner &&= '<ANONYMOUS>';\nrest2.owner &&= '<ANONYMOUS>';\n\nconsole.log(rest1);\nconsole.log(rest2);\n\n\n///////////////////////////////////////\n// The Nullish Coalescing Operator\nrestaurant.numGuests = 0;\nconst guests = restaurant.numGuests || 10;\nconsole.log(guests);\n\n// Nullish: null and undefined (NOT 0 or '')\nconst guestCorrect = restaurant.numGuests ?? 10;\nconsole.log(guestCorrect);\n\n\n///////////////////////////////////////\n// Short Circuiting (&& and ||)\n\nconsole.log('---- OR ----');\n// Use ANY data type, return ANY data type, short-circuiting\nconsole.log(3 || 'Jonas');\nconsole.log('' || 'Jonas');\nconsole.log(true || 0);\nconsole.log(undefined || null);\n\nconsole.log(undefined || 0 || '' || 'Hello' || 23 || null);\n\nrestaurant.numGuests = 0;\nconst guests1 = restaurant.numGuests ? restaurant.numGuests : 10;\nconsole.log(guests1);\n\nconst guests2 = restaurant.numGuests || 10;\nconsole.log(guests2);\n\nconsole.log('---- AND ----');\nconsole.log(0 && 'Jonas');\nconsole.log(7 && 'Jonas');\n\nconsole.log('Hello' && 23 && null && 'jonas');\n\n// Practical example\nif (restaurant.orderPizza) {\n  restaurant.orderPizza('mushrooms', 'spinach');\n}\n\nrestaurant.orderPizza && restaurant.orderPizza('mushrooms', 'spinach');\n\n\n///////////////////////////////////////\n// Rest Pattern and Parameters\n// 1) Destructuring\n\n// SPREAD, because on RIGHT side of =\nconst arr = [1, 2, ...[3, 4]];\n\n// REST, because on LEFT side of =\nconst [a, b, ...others] = [1, 2, 3, 4, 5];\nconsole.log(a, b, others);\n\nconst [pizza, , risotto, ...otherFood] = [\n  ...restaurant.mainMenu,\n  ...restaurant.starterMenu,\n];\nconsole.log(pizza, risotto, otherFood);\n\n// Objects\nconst { sat, ...weekdays } = restaurant.openingHours;\nconsole.log(weekdays);\n\n// 2) Functions\nconst add = function (...numbers) {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) sum += numbers[i];\n  console.log(sum);\n};\n\nadd(2, 3);\nadd(5, 3, 7, 2);\nadd(8, 2, 5, 3, 2, 1, 4);\n\nconst x = [23, 5, 7];\nadd(...x);\n\nrestaurant.orderPizza('mushrooms', 'onion', 'olives', 'spinach');\nrestaurant.orderPizza('mushrooms');\n\n\n///////////////////////////////////////\n// The Spread Operator (...)\n\nconst arr = [7, 8, 9];\nconst badNewArr = [1, 2, arr[0], arr[1], arr[2]];\nconsole.log(badNewArr);\n\nconst newArr = [1, 2, ...arr];\nconsole.log(newArr);\n\nconsole.log(...newArr);\nconsole.log(1, 2, 7, 8, 9);\n\nconst newMenu = [...restaurant.mainMenu, 'Gnocci'];\nconsole.log(newMenu);\n\n// Copy array\nconst mainMenuCopy = [...restaurant.mainMenu];\n\n// Join 2 arrays\nconst menu = [...restaurant.starterMenu, ...restaurant.mainMenu];\nconsole.log(menu);\n\n// Iterables: arrays, strings, maps, sets. NOT objects\nconst str = 'Jonas';\nconst letters = [...str, ' ', 'S.'];\nconsole.log(letters);\nconsole.log(...str);\n// console.log(`${...str} Schmedtmann`);\n\n// Real-world example\nconst ingredients = [\n  // prompt(\"Let's make pasta! Ingredient 1?\"),\n  // prompt('Ingredient 2?'),\n  // prompt('Ingredient 3'),\n];\nconsole.log(ingredients);\n\nrestaurant.orderPasta(ingredients[0], ingredients[1], ingredients[2]);\nrestaurant.orderPasta(...ingredients);\n\n// Objects\nconst newRestaurant = { foundedIn: 1998, ...restaurant, founder: 'Guiseppe' };\nconsole.log(newRestaurant);\n\nconst restaurantCopy = { ...restaurant };\nrestaurantCopy.name = 'Ristorante Roma';\nconsole.log(restaurantCopy.name);\nconsole.log(restaurant.name);\n\n\n///////////////////////////////////////\n// Destructuring Objects\nrestaurant.orderDelivery({\n  time: '22:30',\n  address: 'Via del Sole, 21',\n  mainIndex: 2,\n  starterIndex: 2,\n});\n\nrestaurant.orderDelivery({\n  address: 'Via del Sole, 21',\n  starterIndex: 1,\n});\n\nconst { name, openingHours, categories } = restaurant;\nconsole.log(name, openingHours, categories);\n\nconst {\n  name: restaurantName,\n  openingHours: hours,\n  categories: tags,\n} = restaurant;\nconsole.log(restaurantName, hours, tags);\n\n// Default values\nconst { menu = [], starterMenu: starters = [] } = restaurant;\nconsole.log(menu, starters);\n\n// Mutating variables\nlet a = 111;\nlet b = 999;\nconst obj = { a: 23, b: 7, c: 14 };\n({ a, b } = obj);\nconsole.log(a, b);\n\n// Nested objects\nconst {\n  fri: { open: o, close: c },\n} = openingHours;\nconsole.log(o, c);\n\n\n///////////////////////////////////////\n// Destructuring Arrays\nconst arr = [2, 3, 4];\nconst a = arr[0];\nconst b = arr[1];\nconst c = arr[2];\n\nconst [x, y, z] = arr;\nconsole.log(x, y, z);\nconsole.log(arr);\n\nlet [main, , secondary] = restaurant.categories;\nconsole.log(main, secondary);\n\n// Switching variables\n// const temp = main;\n// main = secondary;\n// secondary = temp;\n// console.log(main, secondary);\n\n[main, secondary] = [secondary, main];\nconsole.log(main, secondary);\n\n// Receive 2 return values from a function\nconst [starter, mainCourse] = restaurant.order(2, 0);\nconsole.log(starter, mainCourse);\n\n// Nested destructuring\nconst nested = [2, 4, [5, 6]];\n// const [i, , j] = nested;\nconst [i, , [j, k]] = nested;\nconsole.log(i, j, k);\n\n// Default values\nconst [p = 1, q = 1, r = 1] = [8, 9];\nconsole.log(p, q, r);\n*/\n"],"names":[],"version":3,"file":"final.0b10bf5d.js.map","sourceRoot":"/__parcel_source_root/"}